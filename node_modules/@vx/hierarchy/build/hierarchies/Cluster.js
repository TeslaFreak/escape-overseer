'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = Cluster;

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

var _group = require('@vx/group');

var _d3Hierarchy = require('d3-hierarchy');

var _HierarchyDefaultLink = require('../HierarchyDefaultLink');

var _HierarchyDefaultLink2 = _interopRequireDefault(_HierarchyDefaultLink);

var _HierarchyDefaultNode = require('../HierarchyDefaultNode');

var _HierarchyDefaultNode2 = _interopRequireDefault(_HierarchyDefaultNode);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

Cluster.propTypes = {
  root: _propTypes2.default.object.isRequired,
  children: _propTypes2.default.func
};

function Cluster(_ref) {
  var top = _ref.top,
      left = _ref.left,
      className = _ref.className,
      root = _ref.root,
      size = _ref.size,
      nodeSize = _ref.nodeSize,
      separation = _ref.separation,
      children = _ref.children,
      _ref$linkComponent = _ref.linkComponent,
      linkComponent = _ref$linkComponent === undefined ? _HierarchyDefaultLink2.default : _ref$linkComponent,
      _ref$nodeComponent = _ref.nodeComponent,
      nodeComponent = _ref$nodeComponent === undefined ? _HierarchyDefaultNode2.default : _ref$nodeComponent,
      restProps = _objectWithoutProperties(_ref, ['top', 'left', 'className', 'root', 'size', 'nodeSize', 'separation', 'children', 'linkComponent', 'nodeComponent']);

  var cluster = (0, _d3Hierarchy.cluster)();
  if (size) cluster.size(size);
  if (nodeSize) cluster.nodeSize(nodeSize);
  if (separation) cluster.separation(separation);

  var data = cluster(root);

  if (!!children) {
    return _react2.default.createElement(
      _group.Group,
      { top: top, left: left, className: (0, _classnames2.default)('vx-cluster', className) },
      children({ data: data })
    );
  }

  return _react2.default.createElement(
    _group.Group,
    { top: top, left: left, className: (0, _classnames2.default)('vx-cluster', className) },
    linkComponent && data.links().map(function (link, i) {
      return _react2.default.createElement(
        _group.Group,
        { key: 'cluster-link-' + i },
        _react2.default.createElement(linkComponent, { link: link })
      );
    }),
    nodeComponent && data.descendants().map(function (node, i) {
      return _react2.default.createElement(
        _group.Group,
        { key: 'cluster-node-' + i },
        _react2.default.createElement(nodeComponent, { node: node })
      );
    })
  );
}