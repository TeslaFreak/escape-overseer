{"version":3,"file":"font-picker.js","sources":["../src/FontManager/isFontAvailable.js","../src/FontManager/fontDownload.js","../src/FontManager/fontList.js","../src/FontManager/StyleManager.js","../src/FontManager/FontManager.js","../node_modules/style-inject/dist/style-inject.es.js","../src/FontPicker/FontPicker.js"],"sourcesContent":["/**\n * Check if font is available locally to be used on the website\n * Source: https://www.kirupa.com/html5/detect_whether_font_is_installed.htm\n * @param {string} fontName\n * @returns {boolean}\n */\nexport function isFontAvailable(fontName) {\n\t// creating our in-memory Canvas element where the magic happens\n\tvar canvas = document.createElement(\"canvas\");\n\tvar context = canvas.getContext(\"2d\");\n\n\t// the text whose final pixel size I want to measure\n\tvar text = \"abcdefghijklmnopqrstuvwxyz0123456789\";\n\n\t// specifying the baseline font\n\tcontext.font = \"72px monospace\";\n\n\t// checking the size of the baseline text\n\tvar baselineSize = context.measureText(text).width;\n\n\t// specifying the font whose existence we want to check\n\tcontext.font = \"72px '\" + fontName + \"', monospace\";\n\n\t// checking the size of the font we want to check\n\tvar newSize = context.measureText(text).width;\n\n\t// removing the Canvas element we created\n\tcanvas = null;\n\n\t// If the size of the two text instances is the same, the font does not exist because it is being\n\t// rendered using the default sans-serif font\n\tif (newSize == baselineSize) {\n\t\treturn false;\n\t} else {\n\t\treturn true;\n\t}\n}\n","import { isFontAvailable } from './isFontAvailable';\n\n\n/**\n * Transform the font's name to a valid selector (make the name lowercase and replace spaces with\n * dashes)\n */\nfunction getFontSelector(font) {\n\treturn font.family.replace(/\\s+/g, '-').toLowerCase();\n}\n\n\n/**\n * Generate the URL to the Google Fonts stylesheet of the specified font\n */\nfunction getDownloadURL(font, variants, onlyCharacters) {\n\t// Base URL\n\tlet url = 'https://fonts.googleapis.com/css?family=';\n\t// Font name\n\turl += font.family.replace(/ /g, '+');\n\t// Font variants\n\turl += `:${variants[0]}`;\n\tfor (let i = 1; i < variants.length; i += 1) {\n\t\turl += `|${variants[i]}`;\n\t}\n\t// Only download characters in the font name if onlyCharacters is true\n\tif (onlyCharacters === true) {\n\t\t// Remove spaces and duplicate letters from the font name\n\t\tlet downloadChars = font.family;\n\t\tdownloadChars = downloadChars.replace(/\\s+/g, '');\n\t\tdownloadChars = downloadChars.split('').filter((x, n, s) => s.indexOf(x) === n).join('');\n\t\turl += `&text=${downloadChars}`;\n\t}\n\treturn url;\n}\n\n\n/**\n * Add Google Fonts stylesheet for the specified font family and variants\n */\nfunction downloadFullFont(font, fontSelector, variants, onChange) {\n\tconst url = getDownloadURL(font, variants, false);\n\n\t// Add the stylesheet to the document head\n\tconst link = document.createElement('link');\n\tlink.rel = 'stylesheet';\n\tlink.href = url;\n\tlink.id = `font-full-${fontSelector}`;\n\tif (onChange) {\n\t\t// If onChange function is specified: execute it once the stylesheet has loaded\n\t\tlink.onload = () => {\n\t\t\tonChange(font);\n\t\t};\n\t}\n\tdocument.head.appendChild(link);\n}\n\n\n/**\n * Add limited Google Fonts stylesheet for the specified font family (only containing the characters\n * which are needed to write the font family name)\n */\nfunction downloadPreviewFont(font, fontSelector, variants) {\n\tconst url = getDownloadURL(font, variants, true);\n\n\t// Add the stylesheet to the document head\n\tconst link = document.createElement('link');\n\tlink.rel = 'stylesheet';\n\tlink.href = url;\n\tlink.id = `font-preview-${fontSelector}`;\n\tdocument.head.appendChild(link);\n}\n\n\n/**\n * Check whether the full font needs to be downloaded and do so if necessary. Afterwards, execute\n * the onChange function\n */\nexport function checkFullFont(font, variants, onChange) {\n\tconst fontSelector = getFontSelector(font);\n\n\tif (document.getElementById(`font-preview-${fontSelector}`)) {\n\t\t// If preview font is available: replace it with the full font\n\t\tdocument.getElementById(`font-preview-${fontSelector}`).outerHTML = ''; // remove tag\n\t\tdownloadFullFont(font, fontSelector, variants, onChange);\n\t}\telse if (\n\t\t!document.getElementById(`font-full-${fontSelector}`) &&\n\t\t!isFontAvailable(font.family)\n\t) {\n\t\t// If font is not available: download it\n\t\tdownloadFullFont(font, fontSelector, variants, onChange);\n\t}\telse if (onChange) {\n\t\t// If font is available: execute onChange function if it is specified\n\t\tonChange(font);\n\t}\n}\n\n\n/**\n * Check whether the preview font needs to be downloaded and do so if necessary\n */\nexport function checkPreviewFont(font, variants) {\n\tconst fontSelector = getFontSelector(font);\n\n\t// If full font is not available: download preview font\n\tif (!document.getElementById(`font-full-${fontSelector}`) && !isFontAvailable(font.family)) {\n\t\tdownloadPreviewFont(font, fontSelector, variants);\n\t}\n}\n","/**\n * Fetch list of all fonts available on Google Fonts, sorted by popularity\n */\nexport function fetchList(apiKey) {\n\treturn new Promise((resolve, reject) => {\n\t\tconst url = `https://www.googleapis.com/webfonts/v1/webfonts?sort=popularity&key=${apiKey}`;\n\t\tconst request = new XMLHttpRequest();\n\t\trequest.overrideMimeType('application/json');\n\t\trequest.open('GET', url, true);\n\t\trequest.onreadystatechange = () => {\n\t\t\t// Request has completed\n\t\t\tif (request.readyState === 4) {\n\t\t\t\t// On error\n\t\t\t\tif (request.status !== 200) {\n\t\t\t\t\treturn reject(new Error(`Response has status code ${request.status}`));\n\t\t\t\t}\n\t\t\t\t// On success\n\t\t\t\tconst response = JSON.parse(request.responseText);\n\t\t\t\treturn resolve(response.items);\n\t\t\t}\n\t\t};\n\t\trequest.send();\n\t});\n}\n\n\n/**\n * Filter font list according to the specified options\n */\nexport function filterList(fontList, defaultFont, options) {\n\tlet filteredList = fontList;\n\n\t// 'families' parameter (only keep fonts whose names are included in the provided array)\n\tif (options.families) {\n\t\tfilteredList = filteredList.filter(font => options.families.includes(font.family));\n\t}\n\n\t// 'categories' parameter (only keep fonts in categories from the provided array)\n\tif (options.categories) {\n\t\tfilteredList = filteredList.filter(font => options.categories.includes(font.category));\n\t}\n\n\t// 'variants' parameter (only keep fonts with at least the specified variants)\n\tif (options.variants) {\n\t\tfilteredList = filteredList.filter((font) => {\n\t\t\tfor (let i = 0; i < options.variants.length; i += 1) {\n\t\t\t\tif (font.variants.indexOf(options.variants[i]) === -1) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn true;\n\t\t});\n\t}\n\n\t// 'limit' parameter (limit font list size)\n\tif (options.limit) {\n\t\tfilteredList = filteredList.slice(0, options.limit);\n\t}\n\n\t// Add default font to list if it is not already in it\n\tif (filteredList.filter(font => font.family === defaultFont.family).length === 0) {\n\t\t// Add default font to beginning of list\n\t\tfilteredList.unshift(defaultFont);\n\t\t// Remove least popular font from list if limit parameter is set\n\t\tif (options.limit) {\n\t\t\tfilteredList.pop();\n\t\t}\n\t}\n\n\t// 'sort' parameter (list is already sorted by popularity)\n\tif (options.sort === 'alphabetical') {\n\t\tfilteredList = filteredList.sort((fontA, fontB) => fontA.family.localeCompare(fontB.family));\n\t}\n\n\treturn filteredList;\n}\n","/**\n * Class responsible for adding/removing CSS styles for applying the active font and font previews\n */\nexport default class StyleManager {\n\tconstructor(pickerName, activeFont, variants) {\n\t\tif (pickerName !== '') {\n\t\t\tthis.pickerSuffix = `-${pickerName}`;\n\t\t} else {\n\t\t\tthis.pickerSuffix = '';\n\t\t}\n\t\tthis.stylesheetId = `font-selectors${this.pickerSuffix}`;\n\n\t\tthis.determineFontVariants(variants);\n\n\t\t// If stylesheet for applying font styles was created earlier, continue using it, otherwise\n\t\t// create new one\n\t\tconst existingStylesheet = document.getElementById(this.stylesheetId);\n\t\tif (existingStylesheet) {\n\t\t\tthis.stylesheet = existingStylesheet;\n\t\t} else {\n\t\t\tthis.initStylesheet(activeFont);\n\t\t}\n\t}\n\n\t/**\n\t * Determine the specified font variants (style and weight) and save them in the corresponding\n\t * object variables\n\t */\n\tdetermineFontVariants(variants) {\n\t\t// Font weight/style for previews: split number and text in font variant parameter\n\t\tconst defaultVariant = variants[0].split(/(\\d+)/).filter(Boolean);\n\n\t\t// Determine font variants which will be applied to the fonts in the font picker and to elements\n\t\t// of the .apply-font class\n\t\tif (defaultVariant.length === 1) {\n\t\t\t// Either font weight or style is specified (e.g. 'regular, '300', 'italic')\n\t\t\tif (defaultVariant[0] === 'regular' || defaultVariant[0] === 'italic') {\n\t\t\t\t// Font style is specified\n\t\t\t\t[this.fontStyle] = defaultVariant;\n\t\t\t\tthis.fontWeight = '400';\n\t\t\t}\telse {\n\t\t\t\t// Font weight is specified\n\t\t\t\tthis.fontStyle = 'regular';\n\t\t\t\t[this.fontWeight] = defaultVariant;\n\t\t\t}\n\t\t}\telse if (defaultVariant.length === 2) {\n\t\t\t// Both font weight and style are specified\n\t\t\t[this.fontWeight, this.fontStyle] = defaultVariant;\n\t\t}\n\t}\n\n\t/**\n\t * Generate the selector for the default font, set up the font picker's stylesheet and add it to\n\t * the document head\n\t */\n\tinitStylesheet(activeFont) {\n\t\tthis.stylesheet = document.createElement('style');\n\t\tthis.stylesheet.id = this.stylesheetId;\n\t\tthis.stylesheet.rel = 'stylesheet';\n\t\tthis.stylesheet.type = 'text/css';\n\n\t\t// Apply the default active font\n\t\tconst style = `\n\t\t\t.apply-font${this.pickerSuffix} {\n\t\t\t\tfont-family: \"${activeFont.family}\";\n\t\t\t\tfont-style: ${this.fontStyle};\n\t\t\t\tfont-weight: ${this.fontWeight};\n\t\t\t}\n\t\t`;\n\t\tthis.stylesheet.appendChild(document.createTextNode(style));\n\t\tdocument.head.appendChild(this.stylesheet);\n\t}\n\n\t/**\n\t * Add CSS selector for applying a preview font\n\t */\n\tapplyPreviewStyle(font) {\n\t\tconst fontId = font.family.replace(/\\s+/g, '-').toLowerCase();\n\t\tconst style = `\n\t\t\t.font-${fontId}${this.pickerSuffix} {\n\t\t\t\tfont-family: \"${font.family}\";\n\t\t\t\tfont-style: ${this.fontStyle};\n\t\t\t\tfont-weight: ${this.fontWeight};\n\t\t\t}\n\t\t`;\n\t\tthis.stylesheet.appendChild(document.createTextNode(style));\n\t}\n\n\t/**\n\t * Update the CSS selector for applying the active font to the .apply-font class\n\t */\n\tchangeActiveStyle(activeFont, previousFont) {\n\t\t// Apply font and set fallback fonts\n\t\tconst fallbackFont = activeFont.category === 'handwriting' ? 'cursive' : activeFont.category;\n\t\tconst style = `\n\t\t\t.apply-font${this.pickerSuffix} {\n\t\t\t\tfont-family: \"${activeFont.family}\", \"${previousFont}\", ${fallbackFont};\n\t\t\t\tfont-style: ${this.fontStyle};\n\t\t\t\tfont-weight: ${this.fontWeight};\n\t\t\t}\n\t\t`;\n\t\tthis.stylesheet.replaceChild(document.createTextNode(style), this.stylesheet.childNodes[0]);\n\t}\n}\n","import { checkFullFont, checkPreviewFont } from './fontDownload';\nimport { fetchList, filterList } from './fontList';\nimport StyleManager from './StyleManager';\n\n\n/**\n * Class for managing the list of fonts for the font picker, keeping track of the active font, and\n * downloading/activating Google Fonts\n * @param {string} apiKey (required) - Google API key\n * @param {string} defaultFont - Font that is selected on initialization (default: 'Open Sans')\n * @param {Object} options - Object with additional (optional) parameters:\n *   @param {string} name - If you have multiple font pickers on your site, you need to give them\n *   unique names (which may only consist of letters and digits). These names must also be appended\n *   to the font picker's ID and the .apply-font class name.\n *   Example: If { name: 'main' }, use #font-picker-main and .apply-font-main\n *   @param {string[]} families - If only specific fonts shall appear in the list, specify their\n *   names in an array\n *   @param {string[]} categories - Array of font categories\n *   Possible values: 'sans-serif', 'serif', 'display', 'handwriting', 'monospace' (default: all\n *   categories)\n *   @param {string[]} variants - Array of variants which the fonts must include and which will be\n *   downloaded; the first variant in the array will become the default variant (and will be used\n *   in the font picker and the .apply-font class)\n *   Example: ['regular', 'italic', '700', '700italic'] (default: ['regular'])\n *   @param {number} limit - Maximum number of fonts to be displayed in the list (the least popular\n *   fonts will be omitted; default: 100)\n *   @param {string} sort - Sorting attribute for the font list\n *   Possible values: 'alphabetical' (default), 'popularity'\n * @param {function} onChange - Function which is executed whenever the user changes the active font\n * and its stylesheet finishes downloading\n */\nexport default class FontManager {\n\t/**\n\t * Validate parameters passed to the class constructor\n\t */\n\tstatic validateParameters(apiKey, defaultFont, options, onChange) {\n\t\t// Parameter validation\n\t\tif (!apiKey || typeof apiKey !== 'string') {\n\t\t\tthrow Error('apiKey parameter is not a string or missing');\n\t\t}\n\t\tif (defaultFont && typeof defaultFont !== 'string') {\n\t\t\tthrow Error('defaultFont parameter is not a string');\n\t\t}\n\t\tif (typeof options !== 'object') {\n\t\t\tthrow Error('options parameter is not an object');\n\t\t}\n\t\tif (options.name) {\n\t\t\tif (typeof options.name !== 'string') {\n\t\t\t\tthrow Error('options.name parameter is not a string');\n\t\t\t}\n\t\t\tif (options.name.match(/[^0-9a-z]/i)) {\n\t\t\t\tthrow Error('options.name may only contain letters and digits');\n\t\t\t}\n\t\t}\n\t\tif (options.families && !(options.families instanceof Array)) {\n\t\t\tthrow Error('options.families parameter is not an array');\n\t\t}\n\t\tif (options.categories && !(options.categories instanceof Array)) {\n\t\t\tthrow Error('options.categories parameter is not an array');\n\t\t}\n\t\tif (options.variants && !(options.variants instanceof Array)) {\n\t\t\tthrow Error('options.variants parameter is not an array');\n\t\t}\n\t\tif (options.limit && typeof options.limit !== 'number') {\n\t\t\tthrow Error('options.limit parameter is not a number');\n\t\t}\n\t\tif (options.sort && typeof options.sort !== 'string') {\n\t\t\tthrow Error('options.sort parameter is not a string');\n\t\t}\n\t\tif (onChange && typeof onChange !== 'function') {\n\t\t\tthrow Error('onChange is not a function');\n\t\t}\n\t}\n\n\t/**\n\t * Set default values for options that have not been specified\n\t */\n\tstatic setDefaultOptions(options) {\n\t\tconst newOptions = options;\n\t\tif (!options.name) {\n\t\t\tnewOptions.name = '';\n\t\t}\n\t\tif (!options.limit) {\n\t\t\tnewOptions.limit = 100;\n\t\t}\n\t\tif (!options.variants) {\n\t\t\tnewOptions.variants = ['regular'];\n\t\t}\n\t\tif (!options.sort) {\n\t\t\tnewOptions.sort = 'alphabetical';\n\t\t}\n\t\treturn newOptions;\n\t}\n\n\t/**\n\t * Download the default font (if necessary) and apply it\n\t */\n\tconstructor(apiKey, defaultFont, options = {}, onChange) {\n\t\t// Check parameters and apply defaults if necessary\n\t\tFontManager.validateParameters(apiKey, defaultFont, options, onChange);\n\t\tconst newDefaultFont = defaultFont || 'Open Sans';\n\t\tconst newOptions = FontManager.setDefaultOptions(options);\n\n\t\t// Save parameters as class variables\n\t\tthis.apiKey = apiKey;\n\t\tthis.onChange = onChange;\n\t\tthis.options = newOptions;\n\n\t\t// Set activeFont and initialize font list\n\t\tthis.activeFont = {\n\t\t\tfamily: newDefaultFont,\n\t\t\tvariants: 'regular'\n\t\t};\n\t\tthis.fonts = [];\n\t\tthis.previewIndex = 0; // list index up to which font previews have been downloaded\n\n\t\t// Download and apply default font\n\t\tcheckFullFont(this.activeFont, this.options.variants);\n\t\tthis.styleManager = new StyleManager(this.options.name, this.activeFont, this.options.variants);\n\t}\n\n\t/**\n\t * Download list of available Google Fonts and filter/sort it according to the specified\n\t * parameters in the 'options' object\n\t */\n\tinit() {\n\t\treturn fetchList(this.apiKey)\n\t\t\t.then((fontList) => {\n\t\t\t\tthis.fonts = filterList(fontList, this.activeFont, this.options);\n\t\t\t\tthis.downloadPreviews(10);\n\t\t\t});\n\t}\n\n\t/**\n\t * Download font previews for the list entries up to the given index\n\t */\n\tdownloadPreviews(downloadIndex) {\n\t\t// Stop at the end of the font list\n\t\tlet downloadIndexMax;\n\t\tif (downloadIndex > this.fonts.length) {\n\t\t\tdownloadIndexMax = this.fonts.length;\n\t\t} else {\n\t\t\tdownloadIndexMax = downloadIndex;\n\t\t}\n\n\t\t// Download the previews up to the given index and apply them to the list entries\n\t\tfor (let i = this.previewIndex; i < downloadIndexMax; i += 1) {\n\t\t\tthis.styleManager.applyPreviewStyle(this.fonts[i]);\n\t\t\tcheckPreviewFont(this.fonts[i], this.options.variants);\n\t\t}\n\n\t\tif (downloadIndexMax > this.previewIndex) {\n\t\t\tthis.previewIndex = downloadIndexMax;\n\t\t}\n\t}\n\n\t/**\n\t * Set the specified font as the active one, download it (if necessary) and apply it. On success,\n\t * return the index of the font in the font list. On error, return -1.\n\t */\n\tsetActiveFont(fontFamily) {\n\t\tconst listIndex = this.fonts.findIndex(f => f.family === fontFamily);\n\t\tif (listIndex === -1) {\n\t\t\t// Font is not part of font list: Keep current activeFont and log error\n\t\t\tconsole.error(`Cannot update activeFont: The font \"${fontFamily}\" is not in the font list`);\n\t\t\treturn -1;\n\t\t}\n\t\t// Font is part of font list: Update activeFont and set previous one as fallback\n\t\tconst previousFont = this.activeFont.family;\n\t\tthis.activeFont = this.fonts[listIndex];\n\t\tthis.styleManager.changeActiveStyle(this.activeFont, previousFont);\n\t\tcheckFullFont(this.activeFont, this.options.variants, this.onChange);\n\t\treturn listIndex;\n\t}\n}\n","function styleInject(css, ref) {\n  if ( ref === void 0 ) ref = {};\n  var insertAt = ref.insertAt;\n\n  if (!css || typeof document === 'undefined') { return; }\n\n  var head = document.head || document.getElementsByTagName('head')[0];\n  var style = document.createElement('style');\n  style.type = 'text/css';\n\n  if (insertAt === 'top') {\n    if (head.firstChild) {\n      head.insertBefore(style, head.firstChild);\n    } else {\n      head.appendChild(style);\n    }\n  } else {\n    head.appendChild(style);\n  }\n\n  if (style.styleSheet) {\n    style.styleSheet.cssText = css;\n  } else {\n    style.appendChild(document.createTextNode(css));\n  }\n}\n\nexport default styleInject;\n","import FontManager from '../FontManager/FontManager';\nimport './style/style.scss';\n\n\n/**\n * User interface for the font picker\n * @see FontManager parameters\n */\nexport default class FontPicker {\n\tconstructor(apiKey, defaultFont, options, onChange) {\n\t\t// Function bindings\n\t\tthis.closeEventListener = this.closeEventListener.bind(this);\n\n\t\t// Determine font picker ID and selector suffix from its name\n\t\tif (options.name) {\n\t\t\tthis.pickerSuffix = `-${options.name}`;\n\t\t} else {\n\t\t\tthis.pickerSuffix = '';\n\t\t}\n\t\tthis.pickerId = `font-picker${this.pickerSuffix}`;\n\n\t\t// Initialize FontManager and FontPicker UI\n\t\tthis.fontManager = new FontManager(apiKey, defaultFont, options, onChange);\n\t\tthis.generateUI();\n\t}\n\n\t/**\n\t * Download list of available fonts and generate the font picker UI\n\t */\n\tgenerateUI() {\n\t\tthis.expanded = false;\n\n\t\tconst fontPickerDiv = document.getElementById(this.pickerId);\n\t\tif (!fontPickerDiv) {\n\t\t\tthrow Error(`Missing div with id=\"${this.pickerId}\"`);\n\t\t}\n\n\t\t// HTML for dropdown button (name of active font and dropdown arrow)\n\t\tthis.dropdownButton = document.createElement('button');\n\t\tthis.dropdownButton.classList.add('dropdown-button');\n\t\tthis.dropdownButton.onclick = () => this.toggleExpanded();\n\t\tthis.dropdownButton.onkeypress = () => this.toggleExpanded();\n\t\tthis.dropdownButton.type = 'button';\n\t\tfontPickerDiv.appendChild(this.dropdownButton);\n\t\t// Name of selected font\n\t\tthis.dropdownFont = document.createElement('p');\n\t\tthis.dropdownFont.innerHTML = this.fontManager.activeFont.family;\n\t\tthis.dropdownFont.classList.add('dropdown-font-name');\n\t\tthis.dropdownButton.append(this.dropdownFont);\n\t\t// Dropdown icon (possible classes/states: 'loading', 'finished', 'error')\n\t\tconst dropdownIcon = document.createElement('p');\n\t\tdropdownIcon.classList.add('dropdown-icon', 'loading');\n\t\tthis.dropdownButton.append(dropdownIcon);\n\n\t\t// HTML for font list\n\t\tthis.ul = document.createElement('ul');\n\n\t\t// Fetch font list, display dropdown arrow if successful\n\t\tthis.fontManager.init()\n\t\t\t.then(() => {\n\t\t\t\tdropdownIcon.classList.remove('loading');\n\t\t\t\tdropdownIcon.classList.add('finished');\n\n\t\t\t\t// HTML for font list entries\n\t\t\t\tthis.ul.onscroll = () => this.onScroll(); // download font previews on scroll\n\t\t\t\tfor (let i = 0; i < this.fontManager.fonts.length; i += 1) {\n\t\t\t\t\tconst fontFamily = this.fontManager.fonts[i].family;\n\t\t\t\t\tconst fontId = fontFamily.replace(/\\s+/g, '-').toLowerCase();\n\n\t\t\t\t\t// Write font name in the corresponding font, set onclick listener\n\t\t\t\t\tconst li = document.createElement('li');\n\t\t\t\t\tconst fontButton = document.createElement('button');\n\t\t\t\t\tfontButton.type = 'button';\n\t\t\t\t\tfontButton.innerHTML = fontFamily;\n\t\t\t\t\tfontButton.classList.add(`font-${fontId}${this.pickerSuffix}`);\n\t\t\t\t\tfontButton.onclick = () => {\n\t\t\t\t\t\tthis.toggleExpanded(); // collapse font list\n\t\t\t\t\t\tthis.setActiveFont(this.fontManager.fonts[i].family);\n\t\t\t\t\t};\n\t\t\t\t\tfontButton.onkeypress = () => {\n\t\t\t\t\t\tthis.toggleExpanded(); // collapse font list\n\t\t\t\t\t\tthis.setActiveFont(this.fontManager.fonts[i].family);\n\t\t\t\t\t};\n\t\t\t\t\tli.appendChild(fontButton);\n\n\t\t\t\t\t// If active font: highlight it and save reference\n\t\t\t\t\tif (this.fontManager.fonts[i].family === this.fontManager.activeFont.family) {\n\t\t\t\t\t\tfontButton.classList.add('active-font');\n\t\t\t\t\t\tthis.activeFontA = fontButton;\n\t\t\t\t\t}\n\n\t\t\t\t\tthis.ul.appendChild(li);\n\t\t\t\t}\n\t\t\t\tfontPickerDiv.appendChild(this.ul);\n\t\t\t})\n\t\t\t.catch((err) => {\n\t\t\t\tdropdownIcon.classList.remove('loading');\n\t\t\t\tdropdownIcon.classList.add('error');\n\t\t\t\tconst errMessage = 'Error trying to fetch the list of available fonts';\n\t\t\t\tconsole.error(errMessage);\n\t\t\t\tconsole.error(err);\n\t\t\t\tfontPickerDiv.title = errMessage;\n\t\t\t});\n\t}\n\n\t/**\n\t * EventListener for closing the font picker when clicking anywhere outside it\n\t */\n\tcloseEventListener(e) {\n\t\tlet targetElement = e.target; // clicked element\n\n\t\tdo {\n\t\t\tif (targetElement === document.getElementById(this.pickerId)) {\n\t\t\t\t// Click inside font picker\n\t\t\t\treturn;\n\t\t\t}\n\t\t\t// Move up the DOM\n\t\t\ttargetElement = targetElement.parentNode;\n\t\t} while (targetElement);\n\n\t\t// Click outside font picker\n\t\tthis.toggleExpanded();\n\t}\n\n\t/**\n\t * Return the object of the currently selected font\n\t */\n\tgetActiveFont() {\n\t\treturn this.fontManager.activeFont;\n\t}\n\n\t/**\n\t * Download the font previews for all visible font entries and the five after them\n\t */\n\tonScroll() {\n\t\tconst elementHeight = this.ul.scrollHeight / this.fontManager.fonts.length;\n\t\tconst downloadIndex = Math.ceil((this.ul.scrollTop + this.ul.clientHeight) / elementHeight);\n\t\tthis.fontManager.downloadPreviews(downloadIndex + 5);\n\t}\n\n\t/**\n\t * Set the font with the given font list index as the active one and highlight it in the list\n\t */\n\tsetActiveFont(fontFamily) {\n\t\tconst listIndex = this.fontManager.setActiveFont(fontFamily);\n\t\tif (listIndex >= 0) {\n\t\t\t// On success: Write new font name in dropdown button and highlight it in the font list\n\t\t\tthis.dropdownFont.innerHTML = fontFamily;\n\t\t\tthis.activeFontA.classList.remove('active-font');\n\t\t\tthis.activeFontA = this.ul.getElementsByTagName('li')[listIndex].firstChild;\n\t\t\tthis.activeFontA.classList.add('active-font');\n\t\t}\n\t}\n\n\t/**\n\t * Expand/collapse the picker's font list\n\t */\n\ttoggleExpanded() {\n\t\tif (this.expanded) {\n\t\t\tthis.expanded = false;\n\t\t\tthis.dropdownButton.classList.remove('expanded');\n\t\t\tthis.ul.classList.remove('expanded');\n\t\t\tdocument.removeEventListener('click', this.closeEventListener);\n\t\t}\telse {\n\t\t\tthis.expanded = true;\n\t\t\tthis.dropdownButton.classList.add('expanded');\n\t\t\tthis.ul.classList.add('expanded');\n\t\t\tdocument.addEventListener('click', this.closeEventListener);\n\t\t}\n\t}\n}\n"],"names":["isFontAvailable","fontName","canvas","document","createElement","context","getContext","text","font","baselineSize","measureText","width","newSize","getFontSelector","family","replace","toLowerCase","getDownloadURL","variants","onlyCharacters","url","i","length","downloadChars","split","filter","x","n","s","indexOf","join","downloadFullFont","fontSelector","onChange","link","rel","href","id","onload","head","appendChild","downloadPreviewFont","checkFullFont","getElementById","outerHTML","checkPreviewFont","fetchList","apiKey","Promise","resolve","reject","request","XMLHttpRequest","overrideMimeType","open","onreadystatechange","readyState","status","Error","response","JSON","parse","responseText","items","send","filterList","fontList","defaultFont","options","filteredList","families","includes","categories","category","limit","slice","unshift","pop","sort","fontA","fontB","localeCompare","StyleManager","pickerName","activeFont","pickerSuffix","stylesheetId","determineFontVariants","existingStylesheet","stylesheet","initStylesheet","defaultVariant","Boolean","fontStyle","fontWeight","type","style","createTextNode","fontId","previousFont","fallbackFont","replaceChild","childNodes","FontManager","name","match","Array","newOptions","validateParameters","newDefaultFont","setDefaultOptions","fonts","previewIndex","styleManager","then","downloadPreviews","downloadIndex","downloadIndexMax","applyPreviewStyle","fontFamily","listIndex","findIndex","f","console","error","changeActiveStyle","FontPicker","closeEventListener","bind","pickerId","fontManager","generateUI","expanded","fontPickerDiv","dropdownButton","classList","add","onclick","toggleExpanded","onkeypress","dropdownFont","innerHTML","append","dropdownIcon","ul","init","remove","onscroll","onScroll","li","fontButton","setActiveFont","activeFontA","catch","err","errMessage","title","e","targetElement","target","parentNode","elementHeight","scrollHeight","Math","ceil","scrollTop","clientHeight","getElementsByTagName","firstChild","removeEventListener","addEventListener"],"mappings":"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"}