{"version":3,"file":"FontPicker.js","sources":["../src/FontPicker.js"],"sourcesContent":["import React, { Component } from 'react';\nimport { FontManager } from 'font-picker';\n\n\n/**\n * React interface for the font picker\n * @prop {string} apiKey (required) - Google API key\n * @prop {string} activeFont - Font that should be selected in the font picker and applied to the\n * text (default: 'Open Sans'). Must be stored in component state, and be updated using an onChange\n * listener. See README.md for an example.\n * @prop {Object} options - Object with additional (optional) parameters:\n *   @prop {string} name - If you have multiple font pickers on your site, you need to give them\n *   unique names (which may only consist of letters and digits). These names must also be appended\n *   to the font picker's ID and the .apply-font class name.\n *   Example: If { name: 'main' }, use #font-picker-main and .apply-font-main\n *   @prop {string[]} families - If only specific fonts shall appear in the list, specify their\n *   names in an array\n *   @prop {string[]} categories - Array of font categories\n *   Possible values: 'sans-serif', 'serif', 'display', 'handwriting', 'monospace' (default: all\n *   categories)\n *   @prop {string[]} variants - Array of variants which the fonts must include and which will be\n *   downloaded; the first variant in the array will become the default variant (and will be used\n *   in the font picker and the .apply-font class)\n *   Example: ['regular', 'italic', '700', '700italic'] (default: ['regular'])\n *   @prop {number} limit - Maximum number of fonts to be displayed in the list (the least popular\n *   fonts will be omitted; default: 100)\n *   @prop {string} sort - Sorting attribute for the font list\n *   Possible values: 'alphabetical' (default), 'popularity'\n * @prop {function} onChange - Function which is executed whenever the user changes the active font\n * and its stylesheet finishes downloading\n */\nexport default class FontPicker extends Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\n\t\tthis.state = {\n\t\t\tactiveFont: this.props.activeFont,\n\t\t\terrorText: '',\n\t\t\texpanded: false,\n\t\t\tloadingStatus: 'loading' // possible values: 'loading', 'finished', 'error'\n\t\t};\n\n\t\t// Determine selector suffix from font picker's name\n\t\tif (this.props.options && this.props.options.name) {\n\t\t\tthis.pickerSuffix = `-${this.props.options.name}`;\n\t\t} else {\n\t\t\tthis.pickerSuffix = '';\n\t\t}\n\n\t\t// initialize FontManager object and generate the font list\n\t\tthis.fontManager = new FontManager(\n\t\t\tthis.props.apiKey,\n\t\t\tthis.props.activeFont,\n\t\t\tthis.props.options\n\t\t);\n\t\tthis.fontManager.init()\n\t\t\t.then(() => {\n\t\t\t\t// font list has finished loading\n\t\t\t\tthis.setState({\n\t\t\t\t\terrorText: '',\n\t\t\t\t\tloadingStatus: 'finished'\n\t\t\t\t});\n\t\t\t})\n\t\t\t.catch((err) => {\n\t\t\t\t// error while loading font list\n\t\t\t\tthis.setState({\n\t\t\t\t\terrorText: 'Error trying to fetch the list of available fonts',\n\t\t\t\t\tloadingStatus: 'error'\n\t\t\t\t});\n\t\t\t\tconsole.error(this.state.errorText);\n\t\t\t\tconsole.error(err);\n\t\t\t});\n\n\t\t// function bindings\n\t\tthis.setActiveFont = this.setActiveFont.bind(this);\n\t\tthis.onClose = this.onClose.bind(this);\n\t\tthis.onScroll = this.onScroll.bind(this);\n\t\tthis.toggleExpanded = this.toggleExpanded.bind(this);\n\t}\n\n\t/**\n\t * After every component update, check whether the activeFont prop has changed. If so, change the\n\t * font in the fontManager as well\n\t */\n\tcomponentDidUpdate() {\n\t\tif (this.state.activeFont !== this.props.activeFont) {\n\t\t\tthis.setActiveFont(this.props.activeFont);\n\t\t}\n\t}\n\n\t/**\n\t * EventListener for closing the font picker when clicking anywhere outside it\n\t */\n\tonClose(e) {\n\t\tlet targetElement = e.target; // clicked element\n\n\t\tdo {\n\t\t\tif (targetElement === document.getElementById('font-picker')) {\n\t\t\t\t// click inside font picker\n\t\t\t\treturn;\n\t\t\t}\n\t\t\t// move up the DOM\n\t\t\ttargetElement = targetElement.parentNode;\n\t\t} while (targetElement);\n\n\t\t// click outside font picker\n\t\tthis.toggleExpanded();\n\t}\n\n\t/**\n\t * Download the font previews for all visible font entries and the five after them\n\t */\n\tonScroll(e) {\n\t\tconst elementHeight = e.target.scrollHeight / this.fontManager.fonts.length;\n\t\tconst downloadIndex = Math.ceil((e.target.scrollTop + e.target.clientHeight) / elementHeight);\n\t\tthis.fontManager.downloadPreviews(downloadIndex + 5);\n\t}\n\n\t/**\n\t * Set the font with the given font list index as the active one\n\t */\n\tsetActiveFont(fontFamily) {\n\t\tconst activeFontIndex = this.fontManager.setActiveFont(fontFamily);\n\t\tif (activeFontIndex === -1) {\n\t\t\t// error trying to change font\n\t\t\tthis.setState({\n\t\t\t\tactiveFont: fontFamily,\n\t\t\t\terrorText: `Cannot update activeFont: The font \"${fontFamily}\" is not in the font list`,\n\t\t\t\tloadingStatus: 'error'\n\t\t\t});\n\t\t\tconsole.error(this.state.errorText);\n\t\t} else {\n\t\t\t// font change successful\n\t\t\tthis.setState({\n\t\t\t\tactiveFont: fontFamily,\n\t\t\t\terrorText: '',\n\t\t\t\tloadingStatus: 'finished'\n\t\t\t});\n\t\t}\n\t}\n\n\t/**\n\t * Expand/collapse the picker's font list\n\t */\n\ttoggleExpanded() {\n\t\tif (this.state.expanded) {\n\t\t\tthis.setState({\n\t\t\t\texpanded: false\n\t\t\t});\n\t\t\tdocument.removeEventListener('click', this.onClose);\n\t\t} else {\n\t\t\tthis.setState({\n\t\t\t\texpanded: true\n\t\t\t});\n\t\t\tdocument.addEventListener('click', this.onClose);\n\t\t}\n\t}\n\n\trender() {\n\t\t// generate <ul> with font list; fetch font previews on scroll\n\t\tlet fontList;\n\t\tif (this.state.loadingStatus === 'finished') {\n\t\t\tfontList = (\n\t\t\t\t<ul className={this.state.expanded ? 'expanded' : ''} onScroll={this.onScroll}>\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.fontManager.fonts.map((font) => {\n\t\t\t\t\t\t\tconst isActive = font.family === this.state.activeFont;\n\t\t\t\t\t\t\tconst fontId = font.family.replace(/\\s+/g, '-').toLowerCase();\n\t\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t\t<li key={font.family}>\n\t\t\t\t\t\t\t\t\t<button\n\t\t\t\t\t\t\t\t\t\ttype=\"button\"\n\t\t\t\t\t\t\t\t\t\tclassName={`font-${fontId}${this.pickerSuffix} ${isActive ? 'active-font' : ''}`}\n\t\t\t\t\t\t\t\t\t\tonClick={() => {\n\t\t\t\t\t\t\t\t\t\t\tthis.toggleExpanded();\n\t\t\t\t\t\t\t\t\t\t\tthis.props.onChange(font);\n\t\t\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\t\t\tonKeyPress={() => {\n\t\t\t\t\t\t\t\t\t\t\tthis.toggleExpanded();\n\t\t\t\t\t\t\t\t\t\t\tthis.props.onChange(font);\n\t\t\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t{font.family}\n\t\t\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t\t\t</li>\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t})\n\t\t\t\t\t}\n\t\t\t\t</ul>\n\t\t\t);\n\t\t}\n\n\t\t// render font picker button and attach font list to it\n\t\treturn (\n\t\t\t<div id={`font-picker${this.pickerSuffix}`} title={this.state.errorText}>\n\t\t\t\t<button\n\t\t\t\t\ttype=\"button\"\n\t\t\t\t\tclassName={`dropdown-button ${this.state.expanded ? 'expanded' : ''}`}\n\t\t\t\t\tonClick={this.toggleExpanded}\n\t\t\t\t\tonKeyPress={this.toggleExpanded}\n\t\t\t\t>\n\t\t\t\t\t<p className=\"dropdown-font-name\">{this.state.activeFont}</p>\n\t\t\t\t\t<div className={`dropdown-icon ${this.state.loadingStatus}`} />\n\t\t\t\t</button>\n\t\t\t\t{this.state.loadingStatus === 'finished' && fontList}\n\t\t\t</div>\n\t\t);\n\t}\n}\n"],"names":["FontPicker","props","state","activeFont","options","name","pickerSuffix","fontManager","FontManager","apiKey","init","then","setState","catch","err","error","errorText","setActiveFont","bind","onClose","onScroll","toggleExpanded","e","targetElement","target","document","getElementById","parentNode","elementHeight","scrollHeight","fonts","length","downloadIndex","Math","ceil","scrollTop","clientHeight","downloadPreviews","fontFamily","activeFontIndex","expanded","removeEventListener","addEventListener","fontList","loadingStatus","React","map","font","isActive","family","fontId","replace","toLowerCase","onChange","Component"],"mappings":"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"}